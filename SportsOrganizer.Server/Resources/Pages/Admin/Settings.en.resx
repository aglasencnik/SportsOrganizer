<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="Ascending" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="BasicInformationSettings" xml:space="preserve">
    <value>Basic Information Settings</value>
  </data>
  <data name="bp1" xml:space="preserve">
    <value>Welcome to the Basic Information section of the Settings page. Here, you can modify the essential details of your sports event, such as the language, title, copyright notice, favicon and scoring type.</value>
  </data>
  <data name="bp2" xml:space="preserve">
    <value>The 'Language' field allows you to set the default language for the application. Choose from a variety of supported languages to ensure that the application is accessible to all users.</value>
  </data>
  <data name="bp3" xml:space="preserve">
    <value>Use the 'Title' field to enter the name of your sports event. This will appear at the top of the application and help users identify your event.</value>
  </data>
  <data name="bp4" xml:space="preserve">
    <value>The 'Copyright Notice' field allows you to include a message to indicate ownership of the application and its content.</value>
  </data>
  <data name="bp5" xml:space="preserve">
    <value>Use the 'Favicon' field to upload a custom icon that will appear in the browser tab of the application. This will help users quickly identify your sports event's application among other open tabs.</value>
  </data>
  <data name="bp6" xml:space="preserve">
    <value>Use the 'Scoring Type' dropdown to select the default scoring method for the final results table. The Scoring Type 'Ascending' means that the team with the least amount of final position points wins. The Scoring Type 'Descending' is the right opposite, so the team with the highest amount of points wins.</value>
  </data>
  <data name="BtnSaveChanges" xml:space="preserve">
    <value>Save Changes</value>
  </data>
  <data name="ChooseFile" xml:space="preserve">
    <value>Choose a file...</value>
  </data>
  <data name="CopyrightNoticeError" xml:space="preserve">
    <value>The Copyright Notice field cannot be empty!</value>
  </data>
  <data name="Danger" xml:space="preserve">
    <value>Danger</value>
  </data>
  <data name="Dark" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="Descending" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="ErrorToast" xml:space="preserve">
    <value>There has been an error!</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="Light" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Welcome to the Settings page!</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>This page allows you to change all the settings of your sports event's application. With this tool, you can customize and fine-tune the application to suit your specific needs.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>The Settings page provides an intuitive interface to modify all the application settings. From here, you can change settings related to the event, the website, and other features of the application. You can adjust settings such as, event title, theme settings, and much more.</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>Once you've made your changes, simply click the 'Save Changes' button to update the application with your new settings.</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>The Settings page is a powerful tool that allows you to tailor the application to your specific needs. Use it to customize and fine-tune the application to ensure a successful and seamless sports event.</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Primary" xml:space="preserve">
    <value>Primary</value>
  </data>
  <data name="Secondary" xml:space="preserve">
    <value>Secondary</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="SuccessToast" xml:space="preserve">
    <value>The changes were saved successfully!</value>
  </data>
  <data name="ThemeCustomization" xml:space="preserve">
    <value>Theme Customization</value>
  </data>
  <data name="TitleError" xml:space="preserve">
    <value>The Title field cannot be empty!</value>
  </data>
  <data name="tp1" xml:space="preserve">
    <value>Welcome to the Theme Costumization section of the Settings page. Here, you can customize the look and feel of your sports event's application.</value>
  </data>
  <data name="tp2" xml:space="preserve">
    <value>Use the 'Header Color' field to select a color for the application header. This will appear at the top of the application and help users identify your event.</value>
  </data>
  <data name="tp3" xml:space="preserve">
    <value>The 'Footer Color' field allows you to choose a color for the application footer. This will appear at the bottom of the application and provide additional information or navigation.</value>
  </data>
  <data name="tp4" xml:space="preserve">
    <value>The 'Final Scores Table Color' field allows you to set the color of the data grid that displays the final scores of the competition.</value>
  </data>
  <data name="tp5" xml:space="preserve">
    <value>Use the 'Single Activity Table Color' field to set the color of the data grid that displays a single activity's results.</value>
  </data>
  <data name="tp6" xml:space="preserve">
    <value>Use the 'Data Grid Theme Contrast' dropdown to select the default contrast setting for the data grids. This will ensure that the data is displayed in a clear and readable manner.</value>
  </data>
  <data name="tp7" xml:space="preserve">
    <value>Use the 'Admin Sidebar Theme Contrast' field to select the default contrast setting for the admin sidebar.</value>
  </data>
  <data name="tp8" xml:space="preserve">
    <value>Use the 'Admin Header Theme Contrast' field to select the default contrast setting for the admin header.</value>
  </data>
  <data name="tp9" xml:space="preserve">
    <value>Use the 'Admin Header Background' field to select the background color for the admin header.</value>
  </data>
  <data name="Transparent" xml:space="preserve">
    <value>Transparent</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="WarningToast" xml:space="preserve">
    <value>Check inputs and try again!</value>
  </data>
  <data name="White" xml:space="preserve">
    <value>White</value>
  </data>
</root>