<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityNumber" xml:space="preserve">
    <value>Activity Number</value>
  </data>
  <data name="ActivityType" xml:space="preserve">
    <value>Activity Type</value>
  </data>
  <data name="Ascending" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="BtnAdd" xml:space="preserve">
    <value>Add Activity</value>
  </data>
  <data name="BtnDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="BtnDeleteAll" xml:space="preserve">
    <value>Delete all Activities</value>
  </data>
  <data name="BtnEdit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="BtnExport" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="BtnExportExcel" xml:space="preserve">
    <value>Export to EXCEL</value>
  </data>
  <data name="BtnExportPdf" xml:space="preserve">
    <value>Export to PDF</value>
  </data>
  <data name="BtnExportXml" xml:space="preserve">
    <value>Export to XML</value>
  </data>
  <data name="BtnPrint" xml:space="preserve">
    <value>Print</value>
  </data>
  <data name="ConfModalContent" xml:space="preserve">
    <value>Do you really want to delete all activities?</value>
  </data>
  <data name="ConfModalHeader" xml:space="preserve">
    <value>Confirm deletion of all activities</value>
  </data>
  <data name="DataExportAndPrintingTitle" xml:space="preserve">
    <value>Data Export &amp; Printing</value>
  </data>
  <data name="Descending" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="Distance" xml:space="preserve">
    <value>Distance</value>
  </data>
  <data name="EditData" xml:space="preserve">
    <value>Edit Data</value>
  </data>
  <data name="ep1" xml:space="preserve">
    <value>This section allows you to export and print the data displayed in the data grid. You can export the data into various file formats, including PDF, Excel, and XML.</value>
  </data>
  <data name="ep2" xml:space="preserve">
    <value>To export the data, simply click the 'Export' button and select the desired file format from the dropdown menu. The system will then generate the file and prompt you to save it to your computer.</value>
  </data>
  <data name="ep3" xml:space="preserve">
    <value>In addition to exporting, you can also print the data directly from the page. Simply click the 'Print' button to open the print dialog box. From here, you can select your printer and adjust the print settings as needed.</value>
  </data>
  <data name="ep4" xml:space="preserve">
    <value>Exporting and printing the data is a quick and easy way to share and analyze the data.</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="NumberOfPlayers" xml:space="preserve">
    <value>Number of Players</value>
  </data>
  <data name="OrderType" xml:space="preserve">
    <value>Order Type</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>Welcome to the Activity Editor page!</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>This page allows you to edit the activities that must be completed by the competing teams in your sports event. With the provided editor, you can easily add, edit, or delete activities as needed.</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>Adding a new activity is simple - just click the 'Add Activity' button and fill out the necessary information. You can include the activity name, description, and any other details you wish to add. Once added, the new activity will appear in the editor.</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>If you need to make changes to an existing activity, simply click the 'Edit' button next to the activity's information. You can modify the activity name, description, or any other details as needed. Once you're finished, just click the 'Save Changes' button.</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>In case you need to remove an activity, you can do so by clicking the 'Delete' button next to the activity's information. A confirmation prompt will appear, and once confirmed, the activity will be permanently removed from the editor.</value>
  </data>
  <data name="p6" xml:space="preserve">
    <value>With the Activity Editor page, you have complete control over the activities that must be completed by the competing teams in your event. Use it to organize and maintain the activity information, ensuring a smooth and successful sports event.</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Activity editor</value>
  </data>
  <data name="Points" xml:space="preserve">
    <value>Points</value>
  </data>
  <data name="Props" xml:space="preserve">
    <value>Props</value>
  </data>
  <data name="SuccessToast" xml:space="preserve">
    <value>Activities deleted successfully!</value>
  </data>
  <data name="Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="TotalItems" xml:space="preserve">
    <value>total items</value>
  </data>
  <data name="UniqueIdentifier" xml:space="preserve">
    <value>Unique Identifier</value>
  </data>
  <data name="WarningToast" xml:space="preserve">
    <value>Can't delete activities because of existing activity results!</value>
  </data>
</root>